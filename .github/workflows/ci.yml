name: HRM-CodeGen CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**', 'release/**' ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      deploy_docs:
        description: 'Deploy documentation'
        required: false
        default: false
        type: boolean
      run_benchmarks:
        description: 'Run performance benchmarks'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.10'
  CACHE_PIP_DEPS: 'v1'
  CACHE_PRE_COMMIT: 'v1'
  CACHE_MODELS: 'v1'
  WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black ruff flake8 isort
          pip install -r requirements.txt
      
      - name: Cache pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ env.CACHE_PRE_COMMIT }}-${{ hashFiles('.pre-commit-config.yaml') }}
      
      - name: Run black
        run: black --check --diff .
      
      - name: Run ruff
        run: ruff check .
      
      - name: Run flake8
        run: flake8 .
      
      - name: Check import order
        run: isort --check-only --profile black .

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
      
      - name: Run safety check
        run: safety check -r requirements.txt
      
      - name: Run bandit
        run: bandit -r hrm scripts -c pyproject.toml

  tests:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist
          pip install -r requirements.txt
      
      - name: Cache model artifacts
        uses: actions/cache@v3
        with:
          path: |
            data/mbpp
            checkpoints
          key: ${{ runner.os }}-models-${{ env.CACHE_MODELS }}-${{ hashFiles('scripts/convert_mbpp.py') }}
      
      - name: Run tests
        run: |
          python -m pytest tests/ --cov=hrm --cov-report=xml --cov-report=term -v
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-py${{ matrix.python-version }}
          path: coverage.xml

  gpu-tests:
    name: GPU Tests
    runs-on: [self-hosted, gpu]
    if: github.event_name == 'pull_request' || github.event.inputs.run_benchmarks == 'true'
    needs: [tests]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt
      
      - name: Cache model artifacts
        uses: actions/cache@v3
        with:
          path: |
            data/mbpp
            checkpoints
          key: ${{ runner.os }}-models-${{ env.CACHE_MODELS }}-${{ hashFiles('scripts/convert_mbpp.py') }}
      
      - name: Run GPU tests
        run: |
          python -m pytest tests/test_gpu.py -v
        env:
          CUDA_VISIBLE_DEVICES: 0

  performance-benchmark:
    name: Performance Benchmark
    runs-on: [self-hosted, gpu]
    if: github.event_name == 'pull_request' || github.event.inputs.run_benchmarks == 'true'
    needs: [gpu-tests]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Cache model artifacts
        uses: actions/cache@v3
        with:
          path: |
            data/mbpp
            checkpoints
          key: ${{ runner.os }}-models-${{ env.CACHE_MODELS }}-${{ hashFiles('scripts/convert_mbpp.py') }}
      
      - name: Run benchmarks
        run: |
          mkdir -p benchmark_results
          python scripts/benchmark.py --output benchmark_results/results.json
      
      - name: Compare with baseline
        run: |
          python scripts/compare_benchmarks.py --current benchmark_results/results.json --baseline benchmark_results/baseline.json
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark_results/
      
      - name: Check for performance regression
        run: |
          if [ -f benchmark_results/regression_detected ]; then
            echo "Performance regression detected!"
            cat benchmark_results/regression_report.txt
            exit 1
          fi

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install sphinx sphinx-rtd-theme myst-parser
      
      - name: Build documentation
        run: |
          cd docs
          make html
      
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [build-docs]
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy_docs == 'true'
    steps:
      - uses: actions/checkout@v3
      
      - name: Download documentation
        uses: actions/download-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
          force_orphan: true

  deploy-model-artifacts:
    name: Deploy Model Artifacts
    runs-on: ubuntu-latest
    needs: [tests, performance-benchmark]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Package model artifacts
        run: |
          python scripts/package_artifacts.py --output model-artifacts.tar.gz
      
      - name: Upload model artifacts
        uses: actions/upload-artifact@v3
        with:
          name: model-artifacts
          path: model-artifacts.tar.gz
      
      - name: Upload to model registry
        if: env.WANDB_API_KEY != ''
        run: |
          python scripts/upload_model.py --artifact model-artifacts.tar.gz --project hrm-codegen

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy-docs, deploy-model-artifacts]
    if: always()
    steps:
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: '#hrm-codegen-ci'
          SLACK_TITLE: 'CI/CD Pipeline Results'
          SLACK_MESSAGE: 'CI/CD pipeline completed for HRM-CodeGen'
          SLACK_COLOR: ${{ job.status }}
