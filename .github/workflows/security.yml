name: HRM-CodeGen Security Pipeline

on:
  # Run security scans on schedule
  schedule:
    # Weekly comprehensive security scan
    - cron: '0 0 * * 0'
    # Daily vulnerability monitoring
    - cron: '0 12 * * *'
  
  # Run on pull requests to main branches
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  
  # Run when dependencies are updated
  push:
    branches: [ main, develop ]
    paths:
      - 'requirements.txt'
      - 'Dockerfile'
      - 'docker-compose.yml'
  
  # Allow manual triggering with options
  workflow_dispatch:
    inputs:
      run_all_scans:
        description: 'Run all security scans'
        required: false
        default: false
        type: boolean
      run_dependency_scan:
        description: 'Run dependency vulnerability scan'
        required: false
        default: false
        type: boolean
      run_code_scan:
        description: 'Run code security scan'
        required: false
        default: false
        type: boolean
      run_secret_scan:
        description: 'Run secret detection scan'
        required: false
        default: false
        type: boolean
      run_docker_scan:
        description: 'Run Docker security scan'
        required: false
        default: false
        type: boolean
      run_license_scan:
        description: 'Run license compliance scan'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.10'
  CACHE_PIP_DEPS: 'v1'
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  EMAIL_RECIPIENTS: ${{ secrets.SECURITY_EMAIL_RECIPIENTS }}
  DOCKER_IMAGE: 'hrm-codegen:latest'
  SEVERITY_THRESHOLD: 'medium'  # minimum severity to fail builds: low, medium, high, critical

jobs:
  prepare-security-scan:
    name: Prepare Security Scan
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.set-run-id.outputs.run_id }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Set unique run ID
        id: set-run-id
        run: echo "run_id=$(date +'%Y%m%d_%H%M%S')_${{ github.run_id }}" >> $GITHUB_OUTPUT
      
      - name: Create security report directory
        run: mkdir -p security_reports

  dependency-vulnerability-scan:
    name: Dependency Vulnerability Scan
    needs: prepare-security-scan
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' || 
      github.event_name == 'push' || 
      github.event.inputs.run_all_scans == 'true' || 
      github.event.inputs.run_dependency_scan == 'true'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep
          npm install -g snyk
      
      - name: Run Safety check
        id: safety
        continue-on-error: true
        run: |
          mkdir -p security_reports/dependencies
          safety check -r requirements.txt --output json > security_reports/dependencies/safety_report.json
          safety check -r requirements.txt --output text > security_reports/dependencies/safety_report.txt
          echo "SAFETY_EXIT_CODE=$?" >> $GITHUB_ENV
      
      - name: Run Snyk scan
        id: snyk
        continue-on-error: true
        run: |
          if [ -n "${{ env.SNYK_TOKEN }}" ]; then
            snyk auth ${{ env.SNYK_TOKEN }}
            snyk test --json > security_reports/dependencies/snyk_report.json
            snyk test > security_reports/dependencies/snyk_report.txt
            echo "SNYK_EXIT_CODE=$?" >> $GITHUB_ENV
          else
            echo "Snyk token not provided, skipping Snyk scan"
            echo "SNYK_EXIT_CODE=0" >> $GITHUB_ENV
          fi
      
      - name: Generate dependency vulnerability summary
        run: |
          python scripts/security/generate_dependency_report.py \
            --safety-report security_reports/dependencies/safety_report.json \
            --snyk-report security_reports/dependencies/snyk_report.json \
            --output security_reports/dependencies/summary.md \
            --html-output security_reports/dependencies/summary.html
      
      - name: Upload dependency scan results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-vulnerability-scan
          path: security_reports/dependencies
      
      - name: Check for high severity vulnerabilities
        run: |
          if [ "${{ env.SAFETY_EXIT_CODE }}" != "0" ] || [ "${{ env.SNYK_EXIT_CODE }}" != "0" ]; then
            echo "::warning::High severity vulnerabilities found in dependencies"
            cat security_reports/dependencies/summary.md
          fi
      
      - name: Submit dependency snapshot to GitHub
        uses: advanced-security/maven-dependency-submission-action@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  code-security-analysis:
    name: Code Security Analysis
    needs: prepare-security-scan
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' || 
      github.event_name == 'pull_request' || 
      github.event.inputs.run_all_scans == 'true' || 
      github.event.inputs.run_code_scan == 'true'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit semgrep pylint
      
      - name: Run Bandit scan
        id: bandit
        continue-on-error: true
        run: |
          mkdir -p security_reports/code
          bandit -r hrm scripts -c pyproject.toml -f json -o security_reports/code/bandit_report.json
          bandit -r hrm scripts -c pyproject.toml -f txt -o security_reports/code/bandit_report.txt
          echo "BANDIT_EXIT_CODE=$?" >> $GITHUB_ENV
      
      - name: Run Semgrep scan
        id: semgrep
        continue-on-error: true
        run: |
          semgrep --config=p/python --config=p/security-audit --config=p/owasp-top-ten --json > security_reports/code/semgrep_report.json
          semgrep --config=p/python --config=p/security-audit --config=p/owasp-top-ten > security_reports/code/semgrep_report.txt
          echo "SEMGREP_EXIT_CODE=$?" >> $GITHUB_ENV
      
      - name: Run Pylint security plugins
        id: pylint
        continue-on-error: true
        run: |
          pylint --disable=all --enable=security --output-format=json hrm scripts > security_reports/code/pylint_report.json
          pylint --disable=all --enable=security hrm scripts > security_reports/code/pylint_report.txt
          echo "PYLINT_EXIT_CODE=$?" >> $GITHUB_ENV
      
      - name: Generate code security summary
        run: |
          python scripts/security/generate_code_security_report.py \
            --bandit-report security_reports/code/bandit_report.json \
            --semgrep-report security_reports/code/semgrep_report.json \
            --pylint-report security_reports/code/pylint_report.json \
            --output security_reports/code/summary.md \
            --html-output security_reports/code/summary.html
      
      - name: Upload code security scan results
        uses: actions/upload-artifact@v3
        with:
          name: code-security-analysis
          path: security_reports/code
      
      - name: Check for high severity issues
        run: |
          if [ "${{ env.BANDIT_EXIT_CODE }}" != "0" ] || [ "${{ env.SEMGREP_EXIT_CODE }}" != "0" ] || [ "${{ env.PYLINT_EXIT_CODE }}" != "0" ]; then
            echo "::warning::High severity security issues found in code"
            cat security_reports/code/summary.md
          fi

  secret-detection:
    name: Secret Detection
    needs: prepare-security-scan
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' || 
      github.event_name == 'pull_request' || 
      github.event.inputs.run_all_scans == 'true' || 
      github.event.inputs.run_secret_scan == 'true'
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Run Gitleaks
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        continue-on-error: true
      
      - name: Run trufflehog
        id: trufflehog
        continue-on-error: true
        run: |
          mkdir -p security_reports/secrets
          docker run --rm -v "$PWD:/pwd" trufflesecurity/trufflehog:latest github --repo ${{ github.repository }} --json > security_reports/secrets/trufflehog_report.json
          echo "TRUFFLEHOG_EXIT_CODE=$?" >> $GITHUB_ENV
      
      - name: Generate secrets detection summary
        run: |
          python scripts/security/generate_secrets_report.py \
            --gitleaks-report results.sarif \
            --trufflehog-report security_reports/secrets/trufflehog_report.json \
            --output security_reports/secrets/summary.md \
            --html-output security_reports/secrets/summary.html
      
      - name: Upload secrets detection results
        uses: actions/upload-artifact@v3
        with:
          name: secret-detection
          path: security_reports/secrets
      
      - name: Check for detected secrets
        run: |
          if [ "${{ steps.gitleaks.outcome }}" != "success" ] || [ "${{ env.TRUFFLEHOG_EXIT_CODE }}" != "0" ]; then
            echo "::warning::Potential secrets detected in code"
            cat security_reports/secrets/summary.md
          fi
      
      - name: Upload detected secrets to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif
          category: secret-scanning

  docker-security-scan:
    name: Docker Security Scan
    needs: prepare-security-scan
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' || 
      github.event_name == 'push' || 
      github.event.inputs.run_all_scans == 'true' || 
      github.event.inputs.run_docker_scan == 'true'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: ${{ env.DOCKER_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'security_reports/docker/trivy-results.sarif'
          severity: ${{ env.SEVERITY_THRESHOLD }},CRITICAL
      
      - name: Run Dockle container linter
        continue-on-error: true
        run: |
          mkdir -p security_reports/docker
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $PWD:/tmp goodwithtech/dockle:latest --format json --output /tmp/security_reports/docker/dockle_report.json ${{ env.DOCKER_IMAGE }}
      
      - name: Generate Docker security summary
        run: |
          python scripts/security/generate_docker_report.py \
            --trivy-report security_reports/docker/trivy-results.sarif \
            --dockle-report security_reports/docker/dockle_report.json \
            --output security_reports/docker/summary.md \
            --html-output security_reports/docker/summary.html
      
      - name: Upload Docker security scan results
        uses: actions/upload-artifact@v3
        with:
          name: docker-security-scan
          path: security_reports/docker
      
      - name: Upload Docker scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: security_reports/docker/trivy-results.sarif
          category: container-scanning

  license-compliance:
    name: License Compliance
    needs: prepare-security-scan
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' || 
      github.event_name == 'push' || 
      github.event.inputs.run_all_scans == 'true' || 
      github.event.inputs.run_license_scan == 'true'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      
      - name: Install license checking tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses liccheck
      
      - name: Generate license inventory
        run: |
          mkdir -p security_reports/licenses
          pip-licenses --format=json --with-urls --with-description --with-license-file --no-license-path > security_reports/licenses/license_inventory.json
          pip-licenses --format=markdown --with-urls --with-description > security_reports/licenses/license_inventory.md
      
      - name: Check license compliance
        id: liccheck
        continue-on-error: true
        run: |
          # Create liccheck config file
          cat > liccheck.ini << EOF
          [Licenses]
          authorized_licenses =
              MIT
              BSD
              Apache Software License
              Python Software Foundation License
              Apache License, Version 2.0
              Mozilla Public License 2.0 (MPL 2.0)
              GNU Lesser General Public License v2 or later (LGPLv2+)
              GNU Library or Lesser General Public License (LGPL)
          
          unauthorized_licenses =
              GNU General Public License v2 (GPLv2)
              GNU General Public License v3 (GPLv3)
          
          [Authorized Packages]
          # Specific packages that are authorized regardless of license
          EOF
          
          liccheck -s liccheck.ini -r requirements.txt -l PARANOID > security_reports/licenses/compliance_report.txt
          echo "LICCHECK_EXIT_CODE=$?" >> $GITHUB_ENV
      
      - name: Generate license compliance summary
        run: |
          python scripts/security/generate_license_report.py \
            --inventory security_reports/licenses/license_inventory.json \
            --compliance security_reports/licenses/compliance_report.txt \
            --output security_reports/licenses/summary.md \
            --html-output security_reports/licenses/summary.html
      
      - name: Upload license compliance results
        uses: actions/upload-artifact@v3
        with:
          name: license-compliance
          path: security_reports/licenses
      
      - name: Check for license compliance issues
        run: |
          if [ "${{ env.LICCHECK_EXIT_CODE }}" != "0" ]; then
            echo "::warning::License compliance issues detected"
            cat security_reports/licenses/summary.md
          fi

  static-application-security-testing:
    name: Static Application Security Testing (SAST)
    needs: prepare-security-scan
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' || 
      github.event_name == 'pull_request' || 
      github.event.inputs.run_all_scans == 'true' || 
      github.event.inputs.run_code_scan == 'true'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
          queries: security-and-quality
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:python"
      
      - name: Run SonarCloud Scan
        if: env.SONAR_TOKEN != ''
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      - name: Generate SAST summary
        run: |
          mkdir -p security_reports/sast
          python scripts/security/generate_sast_report.py \
            --codeql-results . \
            --output security_reports/sast/summary.md \
            --html-output security_reports/sast/summary.html
      
      - name: Upload SAST results
        uses: actions/upload-artifact@v3
        with:
          name: static-application-security-testing
          path: security_reports/sast

  security-advisories-monitoring:
    name: Security Advisories Monitoring
    needs: prepare-security-scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.run_all_scans == 'true'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install PyGithub requests
      
      - name: Check GitHub Security Advisories
        run: |
          mkdir -p security_reports/advisories
          python scripts/security/check_security_advisories.py \
            --requirements requirements.txt \
            --output security_reports/advisories/github_advisories.json \
            --token ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check PyPI Security Advisories
        run: |
          python scripts/security/check_pypi_advisories.py \
            --requirements requirements.txt \
            --output security_reports/advisories/pypi_advisories.json
      
      - name: Generate advisories summary
        run: |
          python scripts/security/generate_advisories_report.py \
            --github-advisories security_reports/advisories/github_advisories.json \
            --pypi-advisories security_reports/advisories/pypi_advisories.json \
            --output security_reports/advisories/summary.md \
            --html-output security_reports/advisories/summary.html
      
      - name: Upload advisories results
        uses: actions/upload-artifact@v3
        with:
          name: security-advisories-monitoring
          path: security_reports/advisories
      
      - name: Check for critical advisories
        id: check-advisories
        run: |
          if grep -q "\"critical\": true" security_reports/advisories/github_advisories.json || grep -q "\"critical\": true" security_reports/advisories/pypi_advisories.json; then
            echo "::warning::Critical security advisories found"
            cat security_reports/advisories/summary.md
            echo "critical_advisories=true" >> $GITHUB_OUTPUT
          else
            echo "critical_advisories=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Send alert on critical advisories
        if: steps.check-advisories.outputs.critical_advisories == 'true'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK }}
          SLACK_CHANNEL: '#hrm-codegen-security'
          SLACK_TITLE: '🚨 Critical Security Advisories'
          SLACK_MESSAGE: 'Critical security advisories found for dependencies. See the advisories report for details.'
          SLACK_COLOR: 'danger'
          SLACK_FOOTER: 'HRM-CodeGen Security'

  generate-security-report:
    name: Generate Comprehensive Security Report
    needs: [
      prepare-security-scan,
      dependency-vulnerability-scan,
      code-security-analysis,
      secret-detection,
      docker-security-scan,
      license-compliance,
      static-application-security-testing,
      security-advisories-monitoring
    ]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jinja2 markdown weasyprint
      
      - name: Download all security scan results
        uses: actions/download-artifact@v3
        with:
          path: security_reports
      
      - name: Generate comprehensive security report
        run: |
          mkdir -p security_reports/comprehensive
          python scripts/security/generate_comprehensive_report.py \
            --input-dir security_reports \
            --output security_reports/comprehensive/security_report.md \
            --html-output security_reports/comprehensive/security_report.html \
            --pdf-output security_reports/comprehensive/security_report.pdf \
            --run-id ${{ needs.prepare-security-scan.outputs.run_id }}
      
      - name: Generate remediation recommendations
        run: |
          python scripts/security/generate_remediation_guide.py \
            --input-dir security_reports \
            --output security_reports/comprehensive/remediation_guide.md \
            --html-output security_reports/comprehensive/remediation_guide.html
      
      - name: Upload comprehensive security report
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-security-report
          path: security_reports/comprehensive
      
      - name: Create GitHub security issue for critical findings
        if: github.event_name == 'schedule'
        run: |
          python scripts/security/create_security_issue.py \
            --input security_reports/comprehensive/security_report.md \
            --token ${{ secrets.GITHUB_TOKEN }} \
            --repository ${{ github.repository }} \
            --run-id ${{ needs.prepare-security-scan.outputs.run_id }}
      
      - name: Send security report
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK }}
          SLACK_CHANNEL: '#hrm-codegen-security'
          SLACK_TITLE: '🔒 Security Scan Report'
          SLACK_MESSAGE: 'A new security scan report is available.'
          SLACK_COLOR: 'good'
          SLACK_FOOTER: 'HRM-CodeGen Security'
      
      - name: Email security report to stakeholders
        if: env.EMAIL_RECIPIENTS != '' && github.event_name == 'schedule'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: 'HRM-CodeGen Security Report - ${{ needs.prepare-security-scan.outputs.run_id }}'
          body: file://security_reports/comprehensive/security_report.html
          html_body: file://security_reports/comprehensive/security_report.html
          to: ${{ env.EMAIL_RECIPIENTS }}
          from: HRM-CodeGen Security <${{ secrets.SMTP_USERNAME }}>
          attachments: security_reports/comprehensive/security_report.pdf,security_reports/comprehensive/remediation_guide.pdf
